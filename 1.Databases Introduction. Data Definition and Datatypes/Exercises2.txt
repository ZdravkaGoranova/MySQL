CREATE DATABASE minions;
USE minions;
-- 1
CREATE TABLE minions(
`id` INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
`name` VARCHAR(47),
`age` INT
);

CREATE TABLE towns (
town_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
name VARCHAR(47)
);
-- 2
ALTER TABLE minions ADD  town_id INT;
ALTER TABLE minions
ADD CONSTRAINT fk_minions_towns 
FOREIGN KEY minions(town_id)
REFERENCES towns(town_id);

INSERT INTO towns (town_id,name) VALUES
(1, `Sofia`),
(2, `Plovdiv`),
(3, `Varna`);

INSERT INTO minions (name ,age, town_id) VALUES
(Kevin ,22, 1 ),
(Bob ,15, 3),
(Steward ,NULL, 2);

SELECT  * FROM minions;
SELECT  * FROM towns;

-- 3
INSERT INTO towns (town_id,name) 
VALUES (1, `Sofia`),
(2, `Plovdiv`),
(3, `Varna`);

INSERT INTO minions (name ,age, town_id) VALUES
(Kevin ,22, 1 ),
(Bob ,15, 3),
(Steward ,NULL, 2);

-- 4
TRUNCATE TABLE minions;

-- 5
DROP TABLE minions;
DROP TABLE towns;

-- 6
CREATE TABLE people(
id INT  PRIMARY KEY  AUTO_INCREMENT ,
name  VARCHAR(200)  NOT NULL,
picture BLOB ,
height DOUBLE (3,2),
weight DOUBLE (5,2),
gender CHAR(1) NOT NULL,
birthdate DATE  NOT NULL,
biography TEXT
);

INSERT INTO people (name , gender , birthdate)
VALUES
('NIKI','m', DATE (NOW())),
('ANI','f', DATE (NOW())),
('VIKI','F', DATE (NOW())),
('MONI','m', DATE (NOW())),
('PETKO','m', DATE (NOW()));

SELECT  * FROM people;
-- 7
CREATE TABLE users (
id INT PRIMARY KEY  AUTO_INCREMENT ,
username  VARCHAR(30) UNIQUE NOT NULL,
password VARCHAR(26)  NOT NULL,
profile_picture BLOB ,
last_login_time datetime,
is_deleted BOOLEAN
);

INSERT INTO users (username, password )
VALUES
('Niki','12345' ),
('Miki','12345' ),
('Viki','12345' ),
('Piki','12345' ),
('Riki','12345' );
SELECT  * FROM users;

-- 8
ALTER TABLE users
DROP PRIMARY KEY,
ADD CONSTRAINT  pk_users2
PRIMARY KEY users (id, username);

-- 9
ALTER TABLE users
CHANGE COLUMN  last_login_time
last_login_time DATETIME DEFAULT NOW();

-- 10
ALTER TABLE users
DROP PRIMARY KEY,
ADD CONSTRAINT  pk_users
PRIMARY KEY users(id),
CHANGE COLUMN username
username VARCHAR(30) UNIQUE;

-- 11
CREATE DATABASE movies;
USE movies;

CREATE TABLE directors (
    id INT PRIMARY KEY AUTO_INCREMENT,
    director_name VARCHAR(50) NOT NULL,
    notes TEXT
);

INSERT INTO directors(director_name )
VALUES ('test'),
('test'),
('test'),
('test'),
('test'),
('test');

CREATE TABLE genres (
    id INT PRIMARY KEY AUTO_INCREMENT,
    genre_name VARCHAR(20) NOT NULL,
    notes TEXT
);
INSERT INTO genres (genre_name )
VALUES ('test'),
('test'),
('test'),
('test'),
('test'),
('test');



CREATE TABLE categories (
    id INT PRIMARY KEY AUTO_INCREMENT,
    category_name VARCHAR(20) NOT NULL,
    notes TEXT
);
INSERT INTO categories (category_name )
VALUES ('test'),
('test'),
('test'),
('test'),
('test'),
('test');



CREATE TABLE movies(
id INT  PRIMARY KEY AUTO_INCREMENT, 
title VARCHAR(50)  NOT NULL, 
director_id INT,
-- ADD CONSTRAINT fk_director_id 
-- FOREIGN KEY movies(director_id)
-- REFERENCES directors(id);
copyright_year YEAR, 
length DOUBLE(10,2), 
genre_id INT,
 category_id INT,
 rating DOUBLE(2,2),
 notes TEXT,
 FOREIGN KEY  fk_movies_directors (director_id)
 REFERENCES directors(id),
 FOREIGN KEY  fk_movies_genres (genre_id)
 REFERENCES genres(id),
FOREIGN KEY  fk_movies_categories (category_id)
 REFERENCES categories(id)
);

INSERT INTO movies (title,director_id ,genre_id,category_id )
VALUES ('test' , 1, 2, 3),

('test' , 1, 2, 5),
('test' , 1, 2, 4),
('test' , 1, 2, 3),
('test' , 1, 2, 3);

DROP TABLE movies;
DROP TABLE genders;
SELECT  * FROM movies;
SELECT  * FROM categories;


-- 12

-- 13
CREATE DATABASE  soft_uni;
USE soft_uni;

CREATE TABLE towns (
`id` INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
`name` VARCHAR(50)
);
CREATE TABLE addresses (
`id` INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
 address_text  VARCHAR(50),
 town_id INT
);
CREATE TABLE departments (
`id` INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
`name` VARCHAR(50)
);
CREATE TABLE employees (
    `id` INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    first_name VARCHAR(50),
    middle_name VARCHAR(50),
    last_name VARCHAR(50),
    job_title VARCHAR(50),
    department_id INT,
    hire_date datetime DEFAULT NOW() ,
    salary DOUBLE(8 , 2 ),
    address_id INT,
    
    FOREIGN KEY ( department_id)
    REFERENCES departments(id),
    
	FOREIGN KEY ( address_id)
    REFERENCES addresses(id)
);


-- 14

SELECT * FROM towns;
SELECT * FROM departments;
SELECT * FROM employees;

-- 15
SELECT * FROM towns AS t ORDER BY t.name ASC;
SELECT * FROM departments AS d ORDER BY d.name ASC;
SELECT * FROM employees AS e ORDER BY e.salary desc;

-- 16
SELECT t.name  FROM towns AS t;
SELECT d.name  FROM departments AS d;
SELECT e.first_name , e.last_name , e.job_title , e.salary  FROM employees AS e;


-- 17
update employees
set salary = salary *1.1;
select salary from employees;
